{
    "GitHub": {
        "location": "contents\\GitHub.html",
        "content": "<div class=\"category-content\">>> Upload a folder to an empty GitHub repo:<br><br>    cd path/to/your/folder<br>    git init<br>    git remote add origin https://github.com/your-username/your-repo-name.git<br>    git add .<br>    git commit -m \"Initial commit\"<br>    git branch -M main<br>    git push -u origin main<br>    <br><br>>> Clone a repo into an empty folder:<br><br>    cd path/to/your/empty-folder<br>    git clone https://github.com/your-username/your-repo.git <br><br><br>>> Remove folder after added by mistake (ex.: .idea):<br><br>    git rm -r --cached .idea<br>    git commit -m \"Stop tracking .idea\"<br>    git push<br><br>>> Publish a page:<br><br>    The main HTML file should be in root named index.html<br><br>    1. Go to your repository on GitHub.<br>    2. Click Settings \u2192 Pages (or scroll to the \u201cGitHub Pages\u201d section).<br>    3. Under Source, select the branch: main (or master), and folder: /root.<br>    4. Click Save.<br>    5. GitHub will provide a URL, e.g., https://YOUR_USERNAME.github.io/python-cs-notes/<br>        \u2022 Wait a few minutes for GitHub Pages to process.</div>"
    },
    "Slice Notation": {
        "location": "contents\\Slice Notation.html",
        "content": "<div class=\"category-content\"># reverse<br>word = input()<br>print(word[::-1]) <br><br>----------------------<br><br>#slicing with a step - skips letters<br>print(text[::2])<br></div>"
    },
    ".replace()": {
        "location": "contents\\.replace().html",
        "content": "<div class=\"category-content\">>> Replace by index - use slicing:<br>&nbsp;&nbsp;&nbsp;&nbsp;#  Strings are immutable: assignment via index like name[0] = 'b' won\u2019t work, you need slicing:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;name = 'Yoana'<br>&nbsp;&nbsp;&nbsp;&nbsp;new_name = 'b' + name[1:] # oana<br>&nbsp;&nbsp;&nbsp;&nbsp;print(new_name)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: Boana<br><br>&nbsp;&nbsp;&nbsp;&nbsp;my_list = [10, 20, 30, 40]<br>&nbsp;&nbsp;&nbsp;&nbsp;my_list[1] = 99<br>&nbsp;&nbsp;&nbsp;&nbsp;print(my_list)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: [10, 99, 30, 40]<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;my_dict = {'a': 1, 'b': 2, 'c': 3}<br>&nbsp;&nbsp;&nbsp;&nbsp;my_dict['b'] = 99<br>&nbsp;&nbsp;&nbsp;&nbsp;print(my_dict)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: {'a': 1, 'b': 99, 'c': 3}<br><br>>> Replace by char - use .replace(old, new):<br>#  .replace() is a string method only. It cannot be called on lists, dicts, numbers, or other types.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"banana\"<br>&nbsp;&nbsp;&nbsp;&nbsp;new_text = text.replace('b', 'c')<br>&nbsp;&nbsp;&nbsp;&nbsp;print(new_text) <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: canana<br><br>#  By default str.replace(old, new) replaces all occurrences of old in the string. To replace only the first occurrence of a substring in Python, use the third argument of .replace():<br><br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"hello world, hello universe, hello everyone\"<br>&nbsp;&nbsp;&nbsp;&nbsp;new_text = text.replace(\"hello\", \"hi\", 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(new_text)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: hi world, hello universe, hello everyone<br><br></div>"
    },
    "ASCII": {
        "location": "contents\\ASCII.html",
        "content": "<div class=\"category-content\">ord('a')<br>#this will get the ASCII code<br><br>----------------------<br><br>chr(100)<br>this will get the ASCII symbol<br><br><br><a href=\"https://www.ascii-code.com/\" target=\"_blank\">ASCII Table</a><br></div>"
    },
    "Ranges": {
        "location": "contents\\Ranges.html",
        "content": "<div class=\"category-content\"># regular<br>range(start=0, stop=stop -1, step=1) <br>for a in range(5):  # (0, 5, 1)<br>    print(a)<br> 0<br> 1<br> 2<br> 3<br> 4<br><br>----------------------<br><br># reverse<br>range(start=n, stop=stop +1, step=-1) <br><br>for a in range(5, 0, -1):<br>    print(a)<br>5<br>4<br>3<br>2<br>1    <br><br>word = \"hello\"<br>for i in range((len(word) -1), -1, -1):<br>    print(word[i], end='')<br># Output: olleh<br><br>----------------------    <br><br>#shape illustration <br><br>n = int(input())<br>for i in range(1, n + 1):<br>    print('*' * i)<br>for k in range(n -1, 0, -1):<br>    print('*' * k)<br><br># Output: <br>*<br>**<br>***<br>****<br>*****<br>****<br>***<br>**<br>*<br></div>"
    },
    "for + else": {
        "location": "contents\\for + else.html",
        "content": "<div class=\"category-content\">for item in iterable:<br>    if condition:<br>        break  # If this runs, 'else' is skipped<br>else:<br>    print(\"No break occurred\")   # Runs only if the loop wasn't broken</div>"
    },
    "break vs continue": {
        "location": "contents\\break vs continue.html",
        "content": "<div class=\"category-content\"> for i in range(10):<br>    if i == 5:<br>        break  # stop loop when i == 5<br>    print(i)<br><br> # breaks the loop<br>______________<br><br>for line in file:<br>    if line.strip() == '':<br>        continue  # skip empty lines<br>    process(line)<br><br>#used to skip things, does not reset the loop</div>"
    },
    "Printing } in f-string": {
        "location": "contents\\Printing } in f-string.html",
        "content": "<div class=\"category-content\">\"{{\"  \u2192 prints \"{\"<br><br>\"}}\"  \u2192 prints \"}\"</div>"
    },
    "SyntaxError: f-string: expecting '}'": {
        "location": "contents\\SyntaxError: f-string: expecting '}'.html",
        "content": "<div class=\"category-content\">Use single quotes inside double-quoted f-strings:<br><br>    f\"Hello, {'John'}\"<br><br>Or use double quotes inside single-quoted f-strings:<br><br>    f'Hello, {\"John\"}'<br><br>Python gets confused when it sees the same quote type inside and outside \u2014 it can\u2019t tell where the string ends.<br>Use single quotes inside double-quoted f-strings:<br><br>Rule applies even in {}, ex:<br>f\"You've ordered pizza {self.name} prepared with {\", \".join(f'{i}: {q}' for i, q in self.ingredients.items())} and the price will be {self.price}lv.\"  <br>(this will raise the error still)   </div>"
    },
    "end= ": {
        "location": "contents\\end= .html",
        "content": "<div class=\"category-content\">&nbsp;&nbsp;&nbsp;&nbsp;name = \"Alice\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(f\"Hello, {name}\", end=' ')<br>&nbsp;&nbsp;&nbsp;&nbsp;print(\"How are you?\")<br><br>&nbsp;&nbsp;&nbsp;&nbsp;#  Output:Hello, Alice How are you?<br><br>&nbsp;&nbsp;&nbsp;&nbsp;# keep it out of the f str<br><br>#  end='\\n' is the default behavior of Python\u2019s print() function.</div>"
    },
    "sep=\n": {
        "location": "contents\\sep=\n.html",
        "content": "<div class=\"category-content\">&nbsp;&nbsp;&nbsp;&nbsp;print(1, 2, 3, sep='-')  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: 1-2-3<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;print('apple', 'banana', 'cherry', sep='\\n')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;apple<br>&nbsp;&nbsp;&nbsp;&nbsp;banana<br>&nbsp;&nbsp;&nbsp;&nbsp;cherry<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = ['apple', 'banana', 'cherry']<br>&nbsp;&nbsp;&nbsp;&nbsp;print(*fruits, sep=', ')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: apple, banana, cherry<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = {'apple': 5, 'banana': 3, 'cherry': 7}<br>&nbsp;&nbsp;&nbsp;&nbsp;items = [f\"{key}:{value}\" for key, value in fruits.items()]  # Create a list of \"key:value\" strings<br>&nbsp;&nbsp;&nbsp;&nbsp;print(*items, sep=', ', end=' ENDED HERE\\n')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: apple:5, banana:3, cherry:7 ENDED HERE<br><br>&nbsp;&nbsp;&nbsp;&nbsp;items = [f\"{k}:{v}\" for k, v in fruits.items()]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(*items, sep='\\n')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: <br>&nbsp;&nbsp;&nbsp;&nbsp;apple:5<br>&nbsp;&nbsp;&nbsp;&nbsp;banana:3<br>&nbsp;&nbsp;&nbsp;&nbsp;cherry:7</div>"
    },
    ".join()": {
        "location": "contents\\.join().html",
        "content": "<div class=\"category-content\">#  joins elements of an iterable (like a list of strings) into a single string.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;numbers = [1, 2, 4, 7, 14]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(\" + \".join(map(str, numbers)))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: 1 + 2 + 4 + 7 + 14<br># str.join() only works with strings, so we map to str<br><br>&nbsp;&nbsp;&nbsp;&nbsp;words = ['Python', 'is', 'awesome']<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;print('\\n'.join(words))<br>&nbsp;&nbsp;&nbsp;&nbsp;Python<br>&nbsp;&nbsp;&nbsp;&nbsp;is<br>&nbsp;&nbsp;&nbsp;&nbsp;Awesome<br><br>&nbsp;&nbsp;&nbsp;&nbsp;word = \"hello\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(', '.join(word))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: h, e, l, l, o<br><br>&nbsp;&nbsp;&nbsp;&nbsp;data = {'a': 1, 'b': 2, 'c': 3}<br>&nbsp;&nbsp;&nbsp;&nbsp;print(', '.join(data.keys()))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: a, b, c<br></div>"
    },
    "Concatenation ": {
        "location": "contents\\Concatenation .html",
        "content": "<div class=\"category-content\"># joining strings together to form one longer string<br><br>&nbsp;&nbsp;&nbsp;&nbsp;print('100% Complete!' + \"\\n\" + '[%%%%%%%%%%]')<br>&nbsp;&nbsp;&nbsp;&nbsp;100% Complete!<br>&nbsp;&nbsp;&nbsp;&nbsp;[%%%%%%%%%%]<br><br>&nbsp;&nbsp;&nbsp;&nbsp;print('ba' + 'na' + 'na')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: banana<br><br>&nbsp;&nbsp;&nbsp;&nbsp;return (f\"Hotel {self.name} has {self.guests} total guests\"\r        <br>&nbsp;&nbsp;&nbsp;&nbsp;           f\"\\nFree rooms: {', '.join(map(str, free))}\"\r        <br>                           f\"\\nTaken rooms: {', '.join(map(str, taken))}\")<br><br>\u2022 Each line inside the parentheses is an f-string (formatted string literal).<br>\u2022 When you put string literals one after another inside parentheses, Python automatically concatenates them into one string.<br>\u2022 So this is the same as writing:<br>&nbsp;&nbsp;&nbsp;&nbsp;return (f\"Hotel {self.name} has {self.guests} total guests\" + f\"\\nFree rooms: {', '.join(map(str, free))}\" + f\"\\nTaken rooms: {', '.join(map(str, taken))}\")<br></div>"
    },
    "string formatting for numbers\n": {
        "location": "contents\\string formatting for numbers\n.html",
        "content": "<div class=\"category-content\"><br>#  the result is always a string, no matter what type self.hours is.</div>"
    },
    "\\n in f-string": {
        "location": "\\n in f-string.html",
        "content": "<div class=\"category-content\"><br># You can't use \\n (or any backslash) inside {} in an f-string. This is invalid: &nbsp;&nbsp;&nbsp;&nbsp;f\"{\\n'.join(...)}\"<br>&nbsp;&nbsp;&nbsp;&nbsp;return f\"Section {self.name}: {'\\n'.join(t.details() for t in self.tasks)}\"<br><br>Fix:<br>Move the expression outside:<br>&nbsp;&nbsp;&nbsp;&nbsp;joined = '\\n'.join(t.details() for t in self.tasks)<br>&nbsp;&nbsp;&nbsp;&nbsp;return f\"Section {self.name}: {joined}\"<br></div>"
    },
    "whitespaces, .strip()": {
        "location": "contents\\whitespaces, .strip().html",
        "content": "<div class=\"category-content\">#  If a string is empty or contains only white spaces, calling .strip() on it will return an empty string.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;value = \"   \"     # only spaces<br>&nbsp;&nbsp;&nbsp;&nbsp;value.strip()     # returns \"\"<br><br>#  So, to check whether a string is empty or only spaces:<br>&nbsp;&nbsp;&nbsp;&nbsp;if not value.strip():<br>\r    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise ValueError(\"Name cannot be empty or just whitespace!\")<br><br>#  In Python, the empty string \"\" is considered falsy, which means it behaves like False in a boolean context, hence 'if not' can be used.</div>"
    },
    "str(), repr(), !r, !s": {
        "location": "contents\\str(), repr(), !r, !s.html",
        "content": "<div class=\"category-content\">    &nbsp;&nbsp;&nbsp;&nbsp;return '{' + ', '.join(f\"{kvp[0]!r}: {kvp[1]!r}\" for kvp in self.array) + '}'<br># the !r in an f-string is a conversion flag that tells Python to use the repr() of the expression instead of str().<br><br>&nbsp;&nbsp;&nbsp;&nbsp;{'name': 'Peter', 'age': 25}<br>#Notice that !r includes the quotes around \"Peter\", because that\u2019s how repr() shows strings.<br><br><br>\u2022 !r \u2192 use repr()<br>f\"{x!r}\"&nbsp;&nbsp;&nbsp;&nbsp;Calls repr(x) inside f-string<br><br>\u2022 {} (default) \u2192 use str()<br>f\"{x!s}\"&nbsp;&nbsp;&nbsp;&nbsp;Calls str(x) inside f-string&nbsp;&nbsp;&nbsp;&nbsp;<br>f\"{x}\"&nbsp;&nbsp;&nbsp;&nbsp;Calls str(x) inside f-string&nbsp;&nbsp;&nbsp;&nbsp;<br><br><br>str() \u2192 Meant to return a \u201cnice\u201d or human-readable representation of an object. Used by print() by default.<br>&nbsp;&nbsp;&nbsp;&nbsp;s = \"Hello\\nWorld\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(str(s))   <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;Hello<br>&nbsp;&nbsp;&nbsp;&nbsp;World<br>#  Notice that the newline is interpreted; it prints on two lines.<br><br>repr() \u2192 Meant to return an \u201cofficial\u201d or unambiguous representation of an object. Shows all escape characters, quotes, etc.<br>&nbsp;&nbsp;&nbsp;&nbsp;s = \"Hello\\nWorld\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(repr(s))  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: 'Hello\\nWorld'<br>#  Notice the \\n is visible, and quotes are included.<br><br></div>"
    },
    "unpacking operator *": {
        "location": "contents\\unpacking operator *.html",
        "content": "<div class=\"category-content\">The * in print(*fruits, sep=', ') is the unpacking operator.<br><br>Without *:<br>    fruits = ['apple', 'banana', 'cherry']<br>    print(fruits)<br>    # Output: ['apple', 'banana', 'cherry']<br>#  It prints the list as a list, with brackets and quotes.<br><br>With *:<br>    print(fruits)<br>    # Output: apple banana cherry<br><br>#  The * unpacks the list, so print receives the items as if you had written:<br>    print('apple', 'banana', 'cherry')</div>"
    },
    "Sets ": {
        "location": "contents\\Sets .html",
        "content": "<div class=\"category-content\"><br>>> Methods<br><br>s = {1, 2, 3}<br><br>The add() method only takes a single element at a time. If you try to pass a list or another iterable, it will treat the whole thing as one element<br>&nbsp;&nbsp;&nbsp;&nbsp;s.add(4)        # {1,2,3,4}<br>&nbsp;&nbsp;&nbsp;&nbsp;s.add([5, 6])   # adds the *list itself* as one element<br>&nbsp;&nbsp;&nbsp;&nbsp;print(s)        # {1, 2, 3, 4, [5, 6]}  <-- note the list inside<br><br>The update() method lets you add multiple elements to a set at once, and you can pass it any iterable \u2014 like a list, tuple, or even another set. It adds all the elements that aren\u2019t already in the set.<br>&nbsp;&nbsp;&nbsp;&nbsp;s.update([3,5]) # {1,2,3,4,5}<br><br>If you use remove(x) on a set and x is not in the set, Python will raise a KeyError.<br>&nbsp;&nbsp;&nbsp;&nbsp;s.remove(2)     # {1,3,4,5}<br><br>If you want to avoid an error when the element might not exist, use discard(x) instead:<br>&nbsp;&nbsp;&nbsp;&nbsp;s.discard(10)   # {1,3,4,5}  (no error)<br><br>set.pop() does not remove the \u201clast\u201d element because sets in Python are unordered. It removes and returns an arbitrary element\u2014which element you get is unpredictable.<br>&nbsp;&nbsp;&nbsp;&nbsp;elem = s.pop()  # removes and returns an arbitrary element<br><br>clear() removes all elements from the set, leaving it empty. It doesn\u2019t return anything.<br>&nbsp;&nbsp;&nbsp;&nbsp;s.clear()       # s becomes set()</div>"
    },
    "Lists": {
        "location": "contents\\Lists.html",
        "content": "<div class=\"category-content\"># list[index] = calls the value at that position; the first position is 0 and the last is (len(list) - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;letters = ['a', 'b', 'c', 'd']<br><br>&nbsp;&nbsp;&nbsp;&nbsp;print(letters[0])  # 'a'  \u2192 first element<br>&nbsp;&nbsp;&nbsp;&nbsp;print(letters[2])  # 'c'  \u2192 third element<br>&nbsp;&nbsp;&nbsp;&nbsp;print(letters[-1]) # 'd'  \u2192 last element using negative index<br><br># list.index(letter) = calls the index<br>&nbsp;&nbsp;&nbsp;&nbsp;letters = ['a', 'b', 'c', 'd']<br><br>&nbsp;&nbsp;&nbsp;&nbsp;print(letters.index('b'))  # 1  \u2192 'b' is at index 1<br>&nbsp;&nbsp;&nbsp;&nbsp;print(letters.index('d'))  # 3  \u2192 'd' is at index 3<br><br><br>>> Slice Lists:<br>&nbsp;&nbsp;&nbsp;&nbsp;start = [10, 20, 30, 40, 50]<br>&nbsp;&nbsp;&nbsp;&nbsp;middle = 2<br><br>&nbsp;&nbsp;&nbsp;&nbsp;left = start[0:middle + 1]    # Elements from index 0 up to middle (inclusive)<br>&nbsp;&nbsp;&nbsp;&nbsp;right = start[middle + 1:]    # Elements from index middle+1 to the end<br><br>&nbsp;&nbsp;&nbsp;&nbsp;print(left)   # [10, 20, 30]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(right)  # [40, 50]<br><br>&nbsp;&nbsp;&nbsp;&nbsp;# does not work for deque, needs to be converted to list<br><br><br>>> List Comprehension:<br><br>[expression for item in iterable if condition]<br><br>&nbsp;&nbsp;&nbsp;&nbsp;squares = [x**2 for x in range(5)]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(squares)  # Output: [0, 1, 4, 9, 16]<br><br><br>>> Replace:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = ['apple', 'banana', 'cherry']<br>&nbsp;&nbsp;&nbsp;&nbsp;fruits[1] = 'blueberry'<br>&nbsp;&nbsp;&nbsp;&nbsp;print(fruits)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: ['apple', 'blueberry', 'cherry']<br>#  in Python, replacing an element in a list must be done using its index. Lists are ordered and mutable, so you can assign a new value to a specific position.<br><br><br>>> Reference object:<br><br>### shallow copy<br>&nbsp;&nbsp;&nbsp;&nbsp;list_a = [1, 2, 3]<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b = list_a[:]<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b[0] = 5<br>&nbsp;&nbsp;&nbsp;&nbsp;print(list_a) # Output:  [1, 2, 3]<br>`list_b = list_a[:]` creates a shallow copy of `list_a`. `list_b` is now a new object, so modifying it does not affect the original `list_a`.<br><br><br>### reference<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b = list_a<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b[0] = 5<br>&nbsp;&nbsp;&nbsp;&nbsp;print(list_a)  # Output: [5, 2, 3]<br>list_b would be just another reference to the same list object. Modifying list_b would also change list_a<br><br><br>### shallow copy - nested<br>&nbsp;&nbsp;&nbsp;&nbsp;list_a = [[1, 2], [3, 4]]<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b = list_a[:]   # shallow copy<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b[0][0] = 9<br>&nbsp;&nbsp;&nbsp;&nbsp;print(list_a)  # Output: [[9, 2], [3, 4]]<br>Shallow copies only copy the top-level list. If the list contains nested lists or mutable objects, those inner objects are shared. So, changes to nested objects will affect the original, even with a shallow copy.<br></div>"
    },
    "input transformations": {
        "location": "contents\\input transformations.html",
        "content": "<div class=\"category-content\">str -> list[str]:<br>&nbsp;&nbsp;&nbsp;&nbsp;name = 'Yoana'<br>&nbsp;&nbsp;&nbsp;&nbsp;name_list = list(name)<br>&nbsp;&nbsp;&nbsp;&nbsp;['Y', 'o', 'a', 'n', 'a']<br><br>str -> list[int]:<br>&nbsp;&nbsp;&nbsp;&nbsp;nums = '1, 2, 3, 4, 5'<br>&nbsp;&nbsp;&nbsp;&nbsp;nums_list = [int(item) for item in nums.split(', ')]<br>&nbsp;&nbsp;&nbsp;&nbsp;[1, 2, 3, 4, 5]  # list of integers<br><br>&nbsp;&nbsp;&nbsp;&nbsp;num = 46473829<br>&nbsp;&nbsp;&nbsp;&nbsp;print((list(map(int, str(num)))))<br>&nbsp;&nbsp;&nbsp;&nbsp;[4, 6, 4, 7, 3, 8, 2, 9] # list of integers<br><br>lowercase<br>&nbsp;&nbsp;&nbsp;&nbsp;x = (input().lower().split(' '))<br>&nbsp;&nbsp;&nbsp;&nbsp;SCREAMING IN CAPS LOCK<br>&nbsp;&nbsp;&nbsp;&nbsp;['screaming', 'in', 'caps', 'lock']</div>"
    },
    ".split()": {
        "location": "contents\\.split().html",
        "content": "<div class=\"category-content\">.split() is a string method.<br><br>It splits a string into a list of substrings based on a separator.<br><br>By default, the separator is any whitespace (spaces, tabs, newlines).<br><br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"Hello world Python\"<br>&nbsp;&nbsp;&nbsp;&nbsp;words = text.split()<br>&nbsp;&nbsp;&nbsp;&nbsp;print(words)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: ['Hello', 'world', 'Python']<br><br><br>Using a custom separator<br>You can pass a string as the separator:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"apple,banana,cherry\"<br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = text.split(\",\")<br>&nbsp;&nbsp;&nbsp;&nbsp;print(fruits)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: ['apple', 'banana', 'cherry']<br><br><br>Limiting the number of splits<br>You can also limit how many splits are made using the maxsplit argument:<br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"one two three four\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(text.split(maxsplit=2))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: ['one', 'two', 'three four']</div>"
    },
    ".remove(), .pop(), .popitem()": {
        "location": "contents\\.remove(), .pop(), .popitem().html",
        "content": "<div class=\"category-content\"><br>To remove all occurrences:<br>&nbsp;&nbsp;&nbsp;&nbsp;lst = [1, 2, 3, 2, 4, 2]<br>&nbsp;&nbsp;&nbsp;&nbsp;while 2 in lst:<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lst.remove(2)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(lst)  # [1, 3, 4]<br><br>&nbsp;&nbsp;&nbsp;&nbsp;lst = [1, 2, 3, 2, 4, 2]<br>&nbsp;&nbsp;&nbsp;&nbsp;lst = [x for x in lst if x != 2]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(lst)  # [1, 3, 4]<br></div>"
    },
    "List vs Array\n": {
        "location": "contents\\List vs Array\n.html",
        "content": ""
    },
    "Dicts": {
        "location": "contents\\Dicts.html",
        "content": "<div class=\"category-content\"><br>>>> Multiple values per 1 key:<br>&nbsp;&nbsp;&nbsp;&nbsp;dict = {}<br>&nbsp;&nbsp;&nbsp;&nbsp;index = int(input())<br>&nbsp;&nbsp;&nbsp;&nbsp;for i in range(index):<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key = input()<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val = input()<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if key not in dict:<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dict[key] = []<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dict[key].append(val)</div>"
    },
    "sorted()": {
        "location": "contents\\sorted().html",
        "content": "<div class=\"category-content\">Sorting a List of Dictionaries<br>&nbsp;&nbsp;&nbsp;&nbsp;ships = [\r    {'name': 'Titan', 'hit_strength': 80},\r    {'name': 'Aegis', 'hit_strength': 100},\r    {'name': 'Blazer', 'hit_strength': 100},\r]<br>&nbsp;&nbsp;&nbsp;&nbsp;# Sort by hit_strength DESC, then name ASC<br>&nbsp;&nbsp;&nbsp;&nbsp;\rsorted_ships = sorted(ships, key=lambda x: (-x['hit_strength'], x['name']))\rprint(sorted_ships)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: [{'name': 'Aegis', 'hit_strength': 100},\r    {'name': 'Blazer', 'hit_strength': 100},\r    {'name': 'Titan', 'hit_strength': 80}\r]<br><br>Sorting a List of Tuples or Lists<br>&nbsp;&nbsp;&nbsp;&nbsp;ships = [('Titan', 80),\r    ('Aegis', 100),\r    ('Blazer', 100),\r]<br>&nbsp;&nbsp;&nbsp;&nbsp;# Sort by hit_strength DESC, then name ASC<br>&nbsp;&nbsp;&nbsp;&nbsp;\rsorted_ships = sorted(ships, key=lambda x: (-x[1], x[0]))\rprint(sorted_ships)<br>&nbsp;&nbsp;&nbsp;&nbsp;Same idea, just index-based access.<br><br>Sorting a List of Objects<br>&nbsp;&nbsp;&nbsp;&nbsp;class Ship:\r    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, name, hit_strength):\r        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.name = name\r        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.hit_strength = hit_strength<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def __repr__(self):\r        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return f\"{self.name} ({self.hit_strength})\"<br><br>&nbsp;&nbsp;&nbsp;&nbsp;ships = [Ship(\"Titan\", 80),\r    Ship(\"Aegis\", 100),\r    Ship(\"Blazer\", 100),\r]<br>&nbsp;&nbsp;&nbsp;&nbsp;# Sort by hit_strength DESC, then name ASC<br>&nbsp;&nbsp;&nbsp;&nbsp;\rsorted_ships = sorted(ships, key=lambda x: (-x.hit_strength, x.name))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: [Aegis (100), Blazer (100), Titan (80)] &nbsp;&nbsp;&nbsp;&nbsp;<br></div>"
    },
    ".get(), .setdefault()": {
        "location": "contents\\.get(), .setdefault().html",
        "content": "<div class=\"category-content\">>>> Update the quantity of a specific ingredient in the dictionary.<br>&nbsp;&nbsp;&nbsp;&nbsp;self.ingredients = {\"flour\": 2}<br>&nbsp;&nbsp;&nbsp;&nbsp;ingredient = \"flour\"<br>&nbsp;&nbsp;&nbsp;&nbsp;quantity = 3<br><br>&nbsp;&nbsp;&nbsp;&nbsp;self.ingredients[ingredient] = self.ingredients.get(ingredient, 0) + quantity<br><br>1. self.ingredients.get(ingredient, 0):<br>&nbsp;&nbsp;&nbsp;&nbsp;- Checks if the ingredient exists in the dictionary.<br>&nbsp;&nbsp;&nbsp;&nbsp;- If it does, returns its current amount.<br>&nbsp;&nbsp;&nbsp;&nbsp;- If not, returns 0.<br> 2. + quantity:<br>&nbsp;&nbsp;&nbsp;&nbsp;- Adds the new quantity to the existing amount (or 0 if it's new).<br>3. self.ingredients[ingredient] = ...:<br>&nbsp;&nbsp;&nbsp;&nbsp;- Stores the new total back in the dictionary. If they key did not exist, it created key: 0<br><br># {\"flour\": 5} if \"flour\" was 2 and we added 3<br># {\"sugar\": 3} if \"sugar\" was not in the dictionary before<br></div>"
    },
    "next()": {
        "location": "contents\\next().html",
        "content": "<div class=\"category-content\">&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;numbers = [1, 2, 3, 4]<br><br># Find the first even number<br>&nbsp;&nbsp;&nbsp;&nbsp;first_even = next((n for n in numbers if n % 2 == 0), None)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(first_even)  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: 2</div>"
    },
    "all()\n": {
        "location": "contents\\all()\n.html",
        "content": "<div class=\"category-content\">&nbsp;&nbsp;&nbsp;&nbsp;conditions = [True, True, True]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(all(conditions))  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: True<br><br>&nbsp;&nbsp;&nbsp;&nbsp;conditions = [True, False, True]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(all(conditions))  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: False</div>"
    },
    "any()\n": {
        "location": "contents\\any()\n.html",
        "content": "<div class=\"category-content\">conditions = [False, False, True]<br>print(any(conditions))  <br># Output: True<br><br>conditions = [False, False, False]<br>print(any(conditions))  <br># Output: False<br><br><br>marks = [85, 90, 78]<br>print(all(m >= 40 for m in marks))<br># Output: True<br><br><br>marks = [85, 30, 78]<br>print(all(m >= 40 for m in marks))<br># Output: False</div>"
    },
    "reduce()": {
        "location": "contents\\reduce().html",
        "content": "<img src=\"cat_images/reduce.png\" alt=\"reduce()\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "isinstance()": {
        "location": "contents\\isinstance().html",
        "content": "<div class=\"category-content\">isinstance(object, classinfo)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;item = 3.14<br>&nbsp;&nbsp;&nbsp;&nbsp;if isinstance(item, float):<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(\"Item is a float.\")<br>&nbsp;&nbsp;&nbsp;&nbsp;else:<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(\"Item is NOT a float.\")<br><br>>>> with class:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;class Animal:<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br><br>&nbsp;&nbsp;&nbsp;&nbsp;class Dog(Animal):<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br><br>&nbsp;&nbsp;&nbsp;&nbsp;d = Dog()<br>&nbsp;&nbsp;&nbsp;&nbsp;print(isinstance(d, Dog))     # True<br>&nbsp;&nbsp;&nbsp;&nbsp;print(isinstance(d, Animal))  # True, because Dog is a subclass of Animal<br><br># Using a tuple in isinstance lets you check if the object is an instance of any of several classes. <br><br>&nbsp;&nbsp;&nbsp;&nbsp;if not isinstance(food, (Vegetable, Fruit)):\r    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise TypeError(f\"{self.__class__.__name__} does not eat {food.__class__.__name__}!\")<br>This means:<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 If food is not a Vegetable or a Fruit, raise the error.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 If it is either Vegetable or Fruit (or subclasses), it passes.<br></div>"
    },
    "__getitem__, __setitem__": {
        "location": "contents\\__getitem__, __setitem__.html",
        "content": "<div class=\"category-content\">When you write:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;table[\"name\"] = \"Peter\"<br>Python internally calls the special method:<br>&nbsp;&nbsp;&nbsp;&nbsp;table.__setitem__(\"name\", \"Peter\")<br><br>For example, to get the value back, you can write:<br>&nbsp;&nbsp;&nbsp;&nbsp;print(table[\"name\"])<br>which calls:<br>&nbsp;&nbsp;&nbsp;&nbsp;table.__getitem__(\"name\")<br>and returns \"Peter\".</div>"
    },
    "Tuples": {
        "location": "contents\\Tuples.html",
        "content": "<div class=\"category-content\">A tuple is an ordered, immutable collection of items.<br><br>Defined using parentheses (), e.g., my_tuple = (1, 2, 3).<br><br>Can store heterogeneous data (integers, strings, lists, etc.).<br><br>Indexing and slicing are supported (like lists).<br><br>Immutable \u2192 values cannot be changed after creation.<br><br>Useful for storing fixed collections of data (e.g., coordinates, database records).<br><br>Support nesting: tuples inside tuples.<br><br>Can be used as dictionary keys (unlike lists).</div>"
    },
    "comparison dunder methods": {
        "location": "contents\\comparison dunder methods.html",
        "content": "<div class=\"category-content\">==&nbsp;&nbsp;&nbsp;&nbsp;__eq__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Equality<br>!=&nbsp;&nbsp;&nbsp;&nbsp;__ne__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Not equal<br><&nbsp;&nbsp;&nbsp;&nbsp;__lt__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Less than<br><=&nbsp;&nbsp;&nbsp;&nbsp;__le__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Less than or equal<br>>&nbsp;&nbsp;&nbsp;&nbsp;__gt__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Greater than<br>>=&nbsp;&nbsp;&nbsp;&nbsp;__ge__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Greater than or equal<br><br>class Box:<br>    def __init__(self, volume):<br>        self.volume = volume<br><br>    def __lt__(self, other):<br>        return self.volume < other.volume<br><br>    def __eq__(self, other):<br>        return self.volume == other.volume<br><br>b1 = Box(10)<br>b2 = Box(20)<br><br>print(b1 < b2)  # True<br>print(b1 == b2) # False</div>"
    },
    "Namespaces Order": {
        "location": "contents\\Namespaces Order.html",
        "content": "<div class=\"category-content\"><br>x = \"global x\"  # Global<br><br>def outer():<br>    x = \"enclosing x\"  # Enclosing<br><br>    def inner():<br>        x = \"local x\"  # Local<br>        print(x)<br><br>    inner()<br><br>outer()<br>print(x)  # Prints the global x<br><br>local x<br>global x</div>"
    },
    "Comparing objects and str": {
        "location": "contents\\Comparing objects and str.html",
        "content": "<div class=\"category-content\">self.tasks is a list that holds objects from another class.<br><br>if task_name not in self.tasks: -> if str not in object = nono<br><br># Correct way: find the object by its 'name' attribute:<br>&nbsp;&nbsp;&nbsp;&nbsp;t = next((t for t in self.tasks if t.name == task_name), None)<br>&nbsp;&nbsp;&nbsp;&nbsp;If not t:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return f\"Could not find task with the name {task_name}\"<br>&nbsp;&nbsp;&nbsp;&nbsp;t.completed =T rue<br>&nbsp;&nbsp;&nbsp;&nbsp;return f\"Completed task {task_name}\"<br><br><br></div>"
    },
    "types of inheritance": {
        "location": "contents\\types of inheritance.html",
        "content": "<img src=\"cat_images/types_inh.png\" alt=\"types of inheritance\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    " super()": {
        "location": "contents\\ super().html",
        "content": "<div class=\"category-content\">>Bad:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, name: str, quantity: int):\r    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super().__init__(name, quantity)\r    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.quantity = 10<br>Behavior:<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 Whatever value is passed in as quantity, it gets ignored \u2014 self.quantity is always overwritten to 10.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 So this is a bit misleading to the caller, who might pass quantity=5 expecting it to be used.<br><br><br>>Good:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, name: str, quantity=10):\r    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super().__init__(name, quantity)<br>Behavior:<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 If quantity is not passed, it defaults to 10.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 But if the user does pass a specific value, it is used.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 This is flexible, clean, and expected behavior in Python.<br><br></div>"
    },
    "Getter/setter": {
        "location": "contents\\Getter/setter.html",
        "content": "<div class=\"category-content\"><br>    @property<br>    def username(self):<br>        return self.__username<br>    <br>    @username.setter<br>    def username(self, value):<br>        if len(value) < 5 or len(value) > 15:<br>            raise ValueError(\"The username must be between 5 and 15 characters.\")<br>        self.__username = value<br></div>"
    },
    "SOLID": {
        "location": "contents\\SOLID.html",
        "content": "<div class=\"category-content\">1. Single Responsibility Principle (SRP) \u2013 One class, one job<br>&nbsp;&nbsp;&nbsp;&nbsp;Class: Teacher<br>&nbsp;&nbsp;&nbsp;&nbsp;Responsibility: Teach students<br>&nbsp;&nbsp;&nbsp;&nbsp;What it shouldn\u2019t do: Fix the school\u2019s computers<br>&nbsp;&nbsp;&nbsp;&nbsp;Why: Only one reason to change\u2014teaching. If you make it fix computers too, changes in IT affect teaching.<br>Implementation:<br>&nbsp;&nbsp;&nbsp;&nbsp;Keep teaching tasks in Teacher.<br>&nbsp;&nbsp;&nbsp;&nbsp;Put IT-related work in a separate ITSupport class.<br>&nbsp;&nbsp;&nbsp;&nbsp;One reason to change = one class.<br><br><br>2. Open/Closed Principle (OCP) \u2013 Open for extension, closed for modification<br>&nbsp;&nbsp;&nbsp;&nbsp;Class: RemoteControl<br>&nbsp;&nbsp;&nbsp;&nbsp;Behavior: Controls TV functions (volume, channels)<br>&nbsp;&nbsp;&nbsp;&nbsp;Extending: Add voice control or streaming buttons without changing existing buttons<br>&nbsp;&nbsp;&nbsp;&nbsp;Why: You can add new features without touching the original design.<br>Implementation:<br>&nbsp;&nbsp;&nbsp;&nbsp;Use extensible design: e.g., allow adding new buttons/features without modifying existing ones.<br>&nbsp;&nbsp;&nbsp;&nbsp;New functionality = new class or method, not editing old ones.<br><br><br>3. Liskov Substitution Principle (LSP) \u2013 Subtypes must work like their base type<br>&nbsp;&nbsp;&nbsp;&nbsp;Class: Car<br>&nbsp;&nbsp;&nbsp;&nbsp;Subclass: SportsCar<br>&nbsp;&nbsp;&nbsp;&nbsp;Behavior: Drive, stop, turn<br>&nbsp;&nbsp;&nbsp;&nbsp;Why: A SportsCar can replace a Car anywhere, behaving as expected. If it breaks normal car behavior, it violates LSP.<br>Implementation:<br>&nbsp;&nbsp;&nbsp;&nbsp;Ensure all subclasses behave like the base class.<br>&nbsp;&nbsp;&nbsp;&nbsp;Don\u2019t override methods in a way that breaks expectations.<br>&nbsp;&nbsp;&nbsp;&nbsp;Anyone using Car should seamlessly use SportsCar.<br><br><br>4. Interface Segregation Principle (ISP) \u2013 Many small interfaces > one big interface<br>&nbsp;&nbsp;&nbsp;&nbsp;Class: Smartphone<br>&nbsp;&nbsp;&nbsp;&nbsp;Interfaces: Calling, Camera, MusicPlayer<br>&nbsp;&nbsp;&nbsp;&nbsp;Why: A person who just wants to make calls doesn\u2019t need to implement camera or music features.<br>&nbsp;&nbsp;&nbsp;&nbsp;Idea: Split big interfaces into small, focused ones.<br>Implementation:<br>&nbsp;&nbsp;&nbsp;&nbsp;Split big interfaces into small, focused interfaces: Calling, Camera, Music.<br>&nbsp;&nbsp;&nbsp;&nbsp;Classes only implement the interfaces they need, avoiding unnecessary methods.<br><br><br>5. Dependency Inversion Principle (DIP) \u2013 Depend on abstractions, not concretes<br>&nbsp;&nbsp;&nbsp;&nbsp;Class: TV<br>&nbsp;&nbsp;&nbsp;&nbsp;Depends on: PowerSource (abstract idea of electricity)<br>&nbsp;&nbsp;&nbsp;&nbsp;Why: It doesn\u2019t care if it\u2019s a battery, plug, or solar\u2014high-level module depends on abstraction, not concrete implementation.<br>Implementation:<br>&nbsp;&nbsp;&nbsp;&nbsp;Depend on abstract concepts (like PowerSource) rather than concrete types.<br>&nbsp;&nbsp;&nbsp;&nbsp;You can swap battery, plug, solar panel without changing the TV class.<br></div>"
    },
    "Bubble Sort (sinking sort, exchange sort)\n": {
        "location": "contents\\Bubble Sort (sinking sort, exchange sort)\n.html",
        "content": "<img src=\"cat_images/bubble2.png\" alt=\"Bubble Sort (sinking sort, exchange sort)\n\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "Insertion Sort (\u201cdirect insertion\u201d) \n": {
        "location": "contents\\Insertion Sort (\u201cdirect insertion\u201d) \n.html",
        "content": "<img src=\"cat_images/insert2.png\" alt=\"Insertion Sort (\u201cdirect insertion\u201d) \n\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "Selection Sort (direct selection)\n": {
        "location": "contents\\Selection Sort (direct selection)\n.html",
        "content": "<img src=\"cat_images/select2.png\" alt=\"Selection Sort (direct selection)\n\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "Math symbols in py": {
        "location": "contents\\Math symbols in py.html",
        "content": "<div class=\"category-content\">3 * 2 # multiply<br>3 ** 2 # exponent = stepenuvane<br><br>----------------------<br><br># modulo division<br>5 % 2   # \u2192 1 (remainder)<br># 5 // 2  # \u2192 2 (quotient)<br>2 % 0 = ZeroDivisionError<br>--<br># good for checking odd and even nums<br>5 % 2 = 1 # odd<br>4 % 2 = 0 # even<br><br>----------------------<br><br># Integer Division (//)<br>5 // 2  = 2<br>4 // 2  = 2<br>5.0 // 2  = 2.0<br>ZeroDivisionError applies 5 // 0 = bad <br><br>----------------------<br><br># Normal Division (/)<br>5 / 2  # Output: 2.5<br>4 / 2  # Output: 2.0<br>ZeroDivisionError applies 5 / 0 = nono<br></div>"
    },
    "Neat math tricks": {
        "location": "contents\\Neat math tricks.html",
        "content": "<div class=\"category-content\">take the last digit<br>&nbsp;&nbsp;&nbsp;&nbsp;n % 10 <br>&nbsp;&nbsp;&nbsp;&nbsp;567 % 10 = 7<br><br>take all digits but the last<br>&nbsp;&nbsp;&nbsp;&nbsp;x // 10 <br>&nbsp;&nbsp;&nbsp;&nbsp;452 // 10 = 45<br><br>&nbsp;&nbsp;&nbsp;&nbsp;#x needs to be longer than 1 digit for this one<br>&nbsp;&nbsp;&nbsp;&nbsp;3 // 10 = 0<br><br>check if num is divisable<br>&nbsp;&nbsp;&nbsp;&nbsp;if num1 % num2 == 0:<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(\"Divisible\")<br>&nbsp;&nbsp;&nbsp;&nbsp;else:<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(\"Not Divisible\")<br>    &nbsp;&nbsp;&nbsp;&nbsp;num = int(input())<br></div>"
    },
    "Algebraic Formulas": {
        "location": "contents\\Algebraic Formulas.html",
        "content": "<img src=\"cat_images/algebra1.png\" alt=\"Algebraic Formulas\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "Determinant of a Matrix\n": {
        "location": "contents\\Determinant of a Matrix\n.html",
        "content": "<img src=\"cat_images/detneg.png\" alt=\"Determinant of a Matrix\n\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "Adding Vectors": {
        "location": "contents\\Adding Vectors.html",
        "content": "<img src=\"cat_images/add_vec.png\" alt=\"Adding Vectors\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "Multiplication of vectors": {
        "location": "contents\\Multiplication of vectors.html",
        "content": "<img src=\"cat_images/mul2.png\" alt=\"Multiplication of vectors\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "Linear combination of vectors": {
        "location": "contents\\Linear combination of vectors.html",
        "content": "<div class=\"category-content\"><br>Scaling then adding is called linear combination.<br><br>3 and -2 are the scalers of i-hat and j-hat. Their combination creates a new vector.</div>"
    },
    "Time Complexities": {
        "location": "contents\\Time Complexities.html",
        "content": "<img src=\"cat_images/complexity.png\" alt=\"Time Complexities\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "unittest": {
        "location": "contents\\unittest.html",
        "content": "<div class=\"category-content\">import unittest<br><br>from project.hero import Hero # class we will test<br><br><br>class TestHero(unittest.TestCase):<br>    def setUp(self):<br>        self.hero  = Hero('Yoana', 5, 100.00, 70.00) #create object to test<br><br>    def test_init(self):<br>        self.assertEqual('Yoana', self.hero.username)<br>        ...&nbsp;&nbsp;&nbsp;&nbsp;<br><br>    def test_battle_self(self):<br>        with self.assertRaises(Exception) as ex:   # catch exception msg as str and compare it<br>            self.hero.battle(Hero('Yoana', 5, 100.00, 70.00))<br>        self.assertEqual(\"You cannot fight yourself\", str(ex.exception))<br><br>    def test_battle_self_zero_or_below(self):<br>        self.hero  = Hero('Yoana', 5, 0.00, 70.00)<br>        with self.assertRaises(Exception) as ex:<br>            self.hero.battle(Hero('Rengin', 5, 0.00, 70.00))<br>        self.assertEqual(\"Your health is lower than or equal to 0. You need to rest\", str(ex.exception))<br><br> <br>while __name__ == '__main__':<br>    unittest.main()</div>"
    },
    "File Handling": {
        "location": "contents\\File Handling.html",
        "content": "<div class=\"category-content\"># 1. Read (default)<br>with open(\"example.txt\", \"r\") as f:<br>    print(f.read())    # Reads whole file<br><br><br># 2. Write (overwrites existing)<br>with open(\"example.txt\", \"w\") as f:<br>    f.write(\"New content replaces old!\")<br><br><br># 3. Append (adds to existing file)<br>with open(\"example.txt\", \"a\") as f:<br>    f.write(\"\\nThis line is appended.\")<br><br><br># 4. Create new file (error if file exists)<br>with open(\"newfile.txt\", \"x\") as f:<br>    f.write(\"This file is newly created.\")<br><br><br># 5. Binary read<br>with open(\"image.png\", \"rb\") as f:<br>    data = f.read()<br><br># 6. Binary write<br>with open(\"copy.png\", \"wb\") as f:<br>    f.write(data)<br><br>Text files \u2192 \"r\", \"w\", \"a\", \"x\"<br>Binary files \u2192 \"rb\", \"wb\", \"ab\", \"xb\"<br><br>A binary file stores data in raw bytes rather than human-readable text.<br>Unlike text files, you cannot open it in a normal text editor and expect to read it properly.<br>Examples: images, videos, audio files, PDFs, executable files.<br><br>Files like .png, .mp3, .mp4 are stored as bytes, not text.<br>To read, process, or copy them, you need to handle them in binary mode.<br>Example: creating a copy of an image, or uploading a video in a program.<br><br>Some apps don\u2019t store the image as a file.<br>Instead, they store the raw bytes of the image (binary) in a database column (often BLOB = Binary Large Object).<br>&nbsp;&nbsp;&nbsp;&nbsp;Pros:<br>Everything is in one place (database).<br>Easier to back up and manage.<br>&nbsp;&nbsp;&nbsp;&nbsp;Cons:<br>Can make the database large.<br>Serving images may be slightly slower.<br><br></div>"
    },
    "setattr()": {
        "location": "contents\\setattr().html",
        "content": "<div class=\"category-content\">>>> What does setattr do?<br><br>Python has built-in functions like setattr to dynamically assign attributes to objects.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;setattr(self, 'red_bull_team', RedBullTeam(budget))<br>&nbsp;&nbsp;&nbsp;&nbsp;is exactly the same as writing:<br>&nbsp;&nbsp;&nbsp;&nbsp;self.red_bull_team = RedBullTeam(budget)<br><br>But setattr lets you do it dynamically, meaning you don\u2019t need to hard-code \"red_bull_team\" \u2014 you can get that name from a variable.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;team_class = RedBullTeam<br>&nbsp;&nbsp;&nbsp;&nbsp;\rattr_name = 'red_bull_team'<br>&nbsp;&nbsp;&nbsp;&nbsp;\rbudget = 10_000_000<br><br>&nbsp;&nbsp;&nbsp;&nbsp;setattr(self, attr_name, team_class(budget))<br>It\u2019s doing:<br>&nbsp;&nbsp;&nbsp;&nbsp;self.red_bull_team = RedBullTeam(10_000_000)<br>&nbsp;&nbsp;&nbsp;&nbsp;But dynamically, based on:<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 Which team you\u2019re registering (Red Bull, Mercedes, etc.)<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 Which class to create (from a dictionary)<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 Which attribute to store it in (also from the dictionary)<br><br>Why not just use self.red_bull_team = ...?<br>You could \u2014 but then you'd need an if:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;if team_name == \"Red Bull\":<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.red_bull_team = RedBullTeam(budget)<br>&nbsp;&nbsp;&nbsp;&nbsp;\relif team_name == \"Mercedes\":<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.mercedes_team = MercedesTeam(budget)<br><br>With setattr, you generalize that logic \u2014 you no longer need the if.<br><br></div>"
    },
    "the time library": {
        "location": "contents\\the time library.html",
        "content": "<img src=\"cat_images/time_sleep.png\" alt=\"the time library\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "Typing": {
        "location": "contents\\Typing.html",
        "content": "<div class=\"category-content\">from typing import List, Optional<br><br>class Student:<br>    def __init__(self, name: str, age: int) -> None:<br>        self.name: str = name<br>        self.age: int = age<br><br>    def greet(self) -> str:<br>        return f\"Hello, my name is {self.name}.\"<br><br><br>class Classroom:<br>    def __init__(self) -> None:<br>        self.students: List[Student] = []<br><br>    def add_student(self, student: Student) -> None:<br>        self.students.append(student)<br><br>    def find_student_by_name(self, name: str) -> Optional[Student]:<br>        \"\"\"<br>        Search for a student by name.<br>        Returns the Student object if found, otherwise None.<br>        \"\"\"<br>        return next((s for s in self.students if s.name == name), None)<br><br><br># it is really helful for lists of objects, because we can access the object's attributes (when we type s. it will show all available attributes), otherwise, we can manually type s.name but it will not show as an error if we use an attr that does not exist <br><br>In Python 3.9+, many built-in generic types like list, dict, tuple and set now support type hints directly.<br>This means you don\u2019t always need to import from typing for common annotations.<br><br></div>"
    },
    "NamedTuple (typing)": {
        "location": "contents\\NamedTuple (typing).html",
        "content": "<div class=\"category-content\">from typing import NamedTuple, Any<br><br><br>class Pair(NamedTuple):<br>    key: Any<br>    value: Any<br><br>>>What is this syntax?<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 Pair is a class that inherits from NamedTuple.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 NamedTuple is a special kind of tuple introduced in Python's typing module (or collections module in earlier versions).<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 It allows you to create tuple-like objects with named fields, so you can access elements by name instead of position.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 The syntax key: Any and value: Any are type annotations indicating that the key and value fields can hold any type of data (Any means any type).<br><br>What does this do practically?<br>You can create immutable pairs with named fields:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;p = Pair(key=\"name\", value=\"Alice\")<br>&nbsp;&nbsp;&nbsp;&nbsp;\rprint(p.key) <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: name<br><br>&nbsp;&nbsp;&nbsp;&nbsp;\rprint(p.value) <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: Alice<br><br>Why use NamedTuple?<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 It creates a lightweight, immutable class.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 Gives you readable code because you access fields by name instead of by index.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 It supports type hints for better static analysis and IDE support.<br><br><br>When you use NamedTuple, you don\u2019t need to write your own __init__ method because it\u2019s automatically generated for you by the NamedTuple base class.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 NamedTuple creates an immutable data structure with fields you define.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 Behind the scenes, Python generates the __init__ method that takes parameters matching the field names (key and value in your example) and assigns them.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 So you get:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;p = Pair(key=\"name\", value=\"Alice\")  <br>&nbsp;&nbsp;&nbsp;&nbsp;# This works without you writing __init__<br><br>If you had to write it manually (for a normal class), it would look like:<br>&nbsp;&nbsp;&nbsp;&nbsp;class Pair:\r    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, key, value):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r        self.key = key<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r        self.value = value<br><br>But NamedTuple saves you this boilerplate, plus adds immutability and other tuple-like behaviors.<br><br></div>"
    },
    "Binary Tree": {
        "location": "contents\\Binary Tree.html",
        "content": "<img src=\"cat_images/bt_stack.png\" alt=\"Binary Tree\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "SQL Numeric Data Types": {
        "location": "contents\\SQL Numeric Data Types.html",
        "content": "<div class=\"category-content\">1. INTEGER (INT)<br>Stores whole numbers (no decimals).<br>Typical range: -2,147,483,648 to 2,147,483,647 (4 bytes).<br>Good for things like IDs, counts, ages.<br>Variants: SMALLINT (2 bytes), BIGINT (8 bytes).<br><br>2. SMALLINT<br>Smaller range than INT.<br>Typical range: -32,768 to 32,767 (2 bytes).<br>Saves storage if you know values are small (e.g., number of items in stock, months of the year).<br><br>3. BIGINT<br>Larger range than INT.<br>Typical range: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 (8 bytes).<br>Use for very large counts (e.g., social media user IDs, transaction logs).<br><br>4. DECIMAL(p, s) / NUMERIC(p, s)<br>Stores exact fixed-point numbers.<br>p = precision (total number of digits).<br>s = scale (digits after the decimal point).<br>Example: DECIMAL(10,2) can store up to 99999999.99.<br>Great for money, prices, financial data (no rounding errors).<br><br>5. FLOAT / REAL / DOUBLE PRECISION<br>Stores approximate values with floating-point representation.<br>FLOAT \u2192 database decides precision (often 4 bytes, ~7 digits).<br>DOUBLE PRECISION \u2192 higher precision (8 bytes, ~15 digits).<br>Faster than DECIMAL, but not always exact (can have rounding errors).<br>Use for scientific data, measurements, percentages, but avoid for money.<br><br>These are all floating-point numeric types, meaning they store approximate numbers (not exact). The main difference is in precision (how many digits they can represent reliably) and storage size.<br>REAL = small, fast, less precise.<br>DOUBLE PRECISION = bigger, slower, much more precise.<br>FLOAT(p) = SQL standard that maps to REAL or DOUBLE depending on p.<br><br>6. SERIAL / BIGSERIAL (PostgreSQL only)<br>Auto-incrementing integer.<br>SERIAL = INTEGER + auto-increment.<br>BIGSERIAL = BIGINT + auto-increment.<br>Perfect for primary keys.</div>"
    },
    "SQL String (Character) Data Types": {
        "location": "contents\\SQL String (Character) Data Types.html",
        "content": "<div class=\"category-content\">1. CHAR(n)<br>Fixed-length string.<br>Always stores exactly n characters \u2192 pads with spaces if shorter.<br>Example: CHAR(5)<br>'hi' is stored as 'hi ' (3 spaces added).<br>Efficient for codes of fixed length (e.g., country codes like USA, postal codes).<br><br>2. VARCHAR(n)<br>Variable-length string.<br>Stores up to n characters, without extra padding.<br>Example: VARCHAR(50) \u2192 can store between 0 and 50 characters.<br>More flexible than CHAR.<br>VARCHAR (without n) \u2192 unlimited length (same as TEXT).<br>Common for names, emails, descriptions.<br><br>3. TEXT<br>Stores unlimited-length text (well, very large).<br>Example: in PostgreSQL, up to 1 GB per value.<br>No need to define a max length.<br>Good for long text (comments, articles, logs).<br>But often lacks some indexing/constraint options compared to VARCHAR.<br><br>4. NVARCHAR / NCHAR (Unicode types, mainly SQL Server / Oracle)<br>Like VARCHAR/CHAR, but stores Unicode characters.<br>Needed when working with multilingual data (Chinese, Arabic, emojis, etc.).<br>Each character can take more bytes (UTF-16 encoding).<br><br>5. Other Useful String Types (DB-specific)<br>UUID (PostgreSQL, MySQL 8.0) \u2192 special string for universally unique identifiers.<br>JSON / JSONB (PostgreSQL, MySQL, SQL Server) \u2192 structured text data.<br>ENUM (MySQL, PostgreSQL) \u2192 predefined list of string values (like \"pending\", \"approved\", \"rejected\").</div>"
    },
    "SQL Date & Time Data Types": {
        "location": "contents\\SQL Date & Time Data Types.html",
        "content": "<div class=\"category-content\">1. DATE<br>Stores a calendar date (year, month, day).<br>Format: YYYY-MM-DD.<br>'2025-09-09'<br>No time of day is stored.<br><br>2. TIME [WITHOUT TIME ZONE]<br>Stores only the time of day (hours, minutes, seconds, fractions).<br>Format: HH:MI:SS[.ffff].<br>'14:35:20'<br><br>3. TIMESTAMP [WITHOUT TIME ZONE]<br>Stores both date and time together.<br>Format: YYYY-MM-DD HH:MI:SS[.ffff].<br>'2025-09-09 14:35:20'<br><br>4. TIMESTAMP WITH TIME ZONE (timestamptz in PostgreSQL)<br>Same as TIMESTAMP, but also stores a time zone offset.<br>'2025-09-09 14:35:20+02'<br>Useful when working across multiple time zones.<br><br>5. INTERVAL (PostgreSQL, some others)<br>Stores a time duration (years, months, days, hours, minutes, seconds).<br>'2 days 5 hours 30 minutes'<br><br>6. DATETIME (MySQL, SQL Server)<br>Equivalent to TIMESTAMP in many systems.<br>Stores both date and time (without timezone).<br>Copy code<br>'2025-09-09 14:35:20'</div>"
    },
    "ENUM SQL": {
        "location": "contents\\ENUM SQL.html",
        "content": "<div class=\"category-content\">CREATE TYPE type_mood AS ENUM ('happy', 'relaxed', 'stressed', 'sad');<br>ALTER TABLE minions_info ADD COLUMN mood type_mood;<br></div>"
    },
    "Custom type in SQL": {
        "location": "contents\\Custom type in SQL.html",
        "content": "<img src=\"cat_images/custom_type.png\" alt=\"Custom type in SQL\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    }
}
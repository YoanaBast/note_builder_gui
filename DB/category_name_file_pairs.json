{
    "GitHub": {
        "location": "contents\\GitHub.html",
        "content": "<div class=\"category-content\">>> Upload a folder to an empty GitHub repo:<br><br>    cd path/to/your/folder<br>    git init<br>    git remote add origin https://github.com/your-username/your-repo-name.git<br>    git add .<br>    git commit -m \"Initial commit\"<br>    git branch -M main<br>    git push -u origin main<br>    <br><br>>> Clone a repo into an empty folder:<br><br>    cd path/to/your/empty-folder<br>    git clone https://github.com/your-username/your-repo.git <br><br><br>>> Remove folder after added by mistake (ex.: .idea):<br><br>    git rm -r --cached .idea<br>    git commit -m \"Stop tracking .idea\"<br>    git push<br><br>>> Publish a page:<br><br>    The main HTML file should be in root named index.html<br><br>    1. Go to your repository on GitHub.<br>    2. Click Settings \u2192 Pages (or scroll to the \u201cGitHub Pages\u201d section).<br>    3. Under Source, select the branch: main (or master), and folder: /root.<br>    4. Click Save.<br>    5. GitHub will provide a URL, e.g., https://YOUR_USERNAME.github.io/python-cs-notes/<br>        \u2022 Wait a few minutes for GitHub Pages to process.</div>"
    },
    "Slice Notation": {
        "location": "contents\\Slice Notation.html",
        "content": "<div class=\"category-content\"># reverse<br>word = input()<br>print(word[::-1]) <br><br>----------------------<br><br>#slicing with a step - skips letters<br>print(text[::2])<br></div>"
    },
    ".replace()": {
        "location": "contents\\.replace().html",
        "content": "<div class=\"category-content\">>> Replace by index - use slicing:<br>&nbsp;&nbsp;&nbsp;&nbsp;#  Strings are immutable: assignment via index like name[0] = 'b' won\u2019t work, you need slicing:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;name = 'Yoana'<br>&nbsp;&nbsp;&nbsp;&nbsp;new_name = 'b' + name[1:] # oana<br>&nbsp;&nbsp;&nbsp;&nbsp;print(new_name)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: Boana<br><br>&nbsp;&nbsp;&nbsp;&nbsp;my_list = [10, 20, 30, 40]<br>&nbsp;&nbsp;&nbsp;&nbsp;my_list[1] = 99<br>&nbsp;&nbsp;&nbsp;&nbsp;print(my_list)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: [10, 99, 30, 40]<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;my_dict = {'a': 1, 'b': 2, 'c': 3}<br>&nbsp;&nbsp;&nbsp;&nbsp;my_dict['b'] = 99<br>&nbsp;&nbsp;&nbsp;&nbsp;print(my_dict)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: {'a': 1, 'b': 99, 'c': 3}<br><br>>> Replace by char - use .replace(old, new):<br>#  .replace() is a string method only. It cannot be called on lists, dicts, numbers, or other types.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"banana\"<br>&nbsp;&nbsp;&nbsp;&nbsp;new_text = text.replace('b', 'c')<br>&nbsp;&nbsp;&nbsp;&nbsp;print(new_text) <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: canana<br><br>#  By default str.replace(old, new) replaces all occurrences of old in the string. To replace only the first occurrence of a substring in Python, use the third argument of .replace():<br><br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"hello world, hello universe, hello everyone\"<br>&nbsp;&nbsp;&nbsp;&nbsp;new_text = text.replace(\"hello\", \"hi\", 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(new_text)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: hi world, hello universe, hello everyone<br><br></div>"
    },
    "ASCII": {
        "location": "contents\\ASCII.html",
        "content": "<div class=\"category-content\">ord('a')<br>#this will get the ASCII code<br><br>----------------------<br><br>chr(100)<br>this will get the ASCII symbol<br><br><br><a href=\"https://www.ascii-code.com/\" target=\"_blank\">ASCII Table</a><br></div>"
    },
    "Ranges": {
        "location": "contents\\Ranges.html",
        "content": "<div class=\"category-content\"># regular<br>range(start=0, stop=stop -1, step=1) <br>for a in range(5):  # (0, 5, 1)<br>    print(a)<br> 0<br> 1<br> 2<br> 3<br> 4<br><br>----------------------<br><br># reverse<br>range(start=n, stop=stop +1, step=-1) <br><br>for a in range(5, 0, -1):<br>    print(a)<br>5<br>4<br>3<br>2<br>1    <br><br>word = \"hello\"<br>for i in range((len(word) -1), -1, -1):<br>    print(word[i], end='')<br># Output: olleh<br><br>----------------------    <br><br>#shape illustration <br><br>n = int(input())<br>for i in range(1, n + 1):<br>    print('*' * i)<br>for k in range(n -1, 0, -1):<br>    print('*' * k)<br><br># Output: <br>*<br>**<br>***<br>****<br>*****<br>****<br>***<br>**<br>*<br></div>"
    },
    "for + else": {
        "location": "contents\\for + else.html",
        "content": "<div class=\"category-content\">for item in iterable:<br>    if condition:<br>        break  # If this runs, 'else' is skipped<br>else:<br>    print(\"No break occurred\")   # Runs only if the loop wasn't broken</div>"
    },
    "break vs continue": {
        "location": "contents\\break vs continue.html",
        "content": "<div class=\"category-content\"> for i in range(10):<br>    if i == 5:<br>        break  # stop loop when i == 5<br>    print(i)<br><br> # breaks the loop<br>______________<br><br>for line in file:<br>    if line.strip() == '':<br>        continue  # skip empty lines<br>    process(line)<br><br>#used to skip things, does not reset the loop</div>"
    },
    "Printing } in f-string": {
        "location": "contents\\Printing } in f-string.html",
        "content": "<div class=\"category-content\">\"{{\"  \u2192 prints \"{\"<br><br>\"}}\"  \u2192 prints \"}\"</div>"
    },
    "SyntaxError: f-string: expecting '}'": {
        "location": "contents\\SyntaxError: f-string: expecting '}'.html",
        "content": "<div class=\"category-content\">Use single quotes inside double-quoted f-strings:<br><br>    f\"Hello, {'John'}\"<br><br>Or use double quotes inside single-quoted f-strings:<br><br>    f'Hello, {\"John\"}'<br><br>Python gets confused when it sees the same quote type inside and outside \u2014 it can\u2019t tell where the string ends.<br>Use single quotes inside double-quoted f-strings:<br><br>Rule applies even in {}, ex:<br>f\"You've ordered pizza {self.name} prepared with {\", \".join(f'{i}: {q}' for i, q in self.ingredients.items())} and the price will be {self.price}lv.\"  <br>(this will raise the error still)   </div>"
    },
    "end= ": {
        "location": "contents\\end= .html",
        "content": "<div class=\"category-content\">&nbsp;&nbsp;&nbsp;&nbsp;name = \"Alice\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(f\"Hello, {name}\", end=' ')<br>&nbsp;&nbsp;&nbsp;&nbsp;print(\"How are you?\")<br><br>&nbsp;&nbsp;&nbsp;&nbsp;#  Output:Hello, Alice How are you?<br><br>&nbsp;&nbsp;&nbsp;&nbsp;# keep it out of the f str<br><br>#  end='\\n' is the default behavior of Python\u2019s print() function.</div>"
    },
    "sep=\n": {
        "location": "contents\\sep=\n.html",
        "content": "<div class=\"category-content\">&nbsp;&nbsp;&nbsp;&nbsp;print(1, 2, 3, sep='-')  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: 1-2-3<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;print('apple', 'banana', 'cherry', sep='\\n')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;apple<br>&nbsp;&nbsp;&nbsp;&nbsp;banana<br>&nbsp;&nbsp;&nbsp;&nbsp;cherry<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = ['apple', 'banana', 'cherry']<br>&nbsp;&nbsp;&nbsp;&nbsp;print(*fruits, sep=', ')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: apple, banana, cherry<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = {'apple': 5, 'banana': 3, 'cherry': 7}<br>&nbsp;&nbsp;&nbsp;&nbsp;items = [f\"{key}:{value}\" for key, value in fruits.items()]  # Create a list of \"key:value\" strings<br>&nbsp;&nbsp;&nbsp;&nbsp;print(*items, sep=', ', end=' ENDED HERE\\n')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: apple:5, banana:3, cherry:7 ENDED HERE<br><br>&nbsp;&nbsp;&nbsp;&nbsp;items = [f\"{k}:{v}\" for k, v in fruits.items()]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(*items, sep='\\n')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: <br>&nbsp;&nbsp;&nbsp;&nbsp;apple:5<br>&nbsp;&nbsp;&nbsp;&nbsp;banana:3<br>&nbsp;&nbsp;&nbsp;&nbsp;cherry:7</div>"
    },
    "unpacing operator *": {
        "location": "contents\\unpacing operator *.html",
        "content": "<div class=\"category-content\">The * in print(*fruits, sep=', ') is the unpacking operator.<br><br>Without *:<br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = ['apple', 'banana', 'cherry']<br>&nbsp;&nbsp;&nbsp;&nbsp;print(fruits)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: ['apple', 'banana', 'cherry']<br>#  It prints the list as a list, with brackets and quotes.<br><br>With *:<br>&nbsp;&nbsp;&nbsp;&nbsp;print(fruits)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: apple banana cherry<br><br>#  The * unpacks the list, so print receives the items as if you had written:<br>&nbsp;&nbsp;&nbsp;&nbsp;print('apple', 'banana', 'cherry')</div>"
    },
    ".join()": {
        "location": "contents\\.join().html",
        "content": "<div class=\"category-content\">#  joins elements of an iterable (like a list of strings) into a single string.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;numbers = [1, 2, 4, 7, 14]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(\" + \".join(map(str, numbers)))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: 1 + 2 + 4 + 7 + 14<br># str.join() only works with strings, so we map to str<br><br>&nbsp;&nbsp;&nbsp;&nbsp;words = ['Python', 'is', 'awesome']<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;print('\\n'.join(words))<br>&nbsp;&nbsp;&nbsp;&nbsp;Python<br>&nbsp;&nbsp;&nbsp;&nbsp;is<br>&nbsp;&nbsp;&nbsp;&nbsp;Awesome<br><br>&nbsp;&nbsp;&nbsp;&nbsp;word = \"hello\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(', '.join(word))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: h, e, l, l, o<br><br>&nbsp;&nbsp;&nbsp;&nbsp;data = {'a': 1, 'b': 2, 'c': 3}<br>&nbsp;&nbsp;&nbsp;&nbsp;print(', '.join(data.keys()))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: a, b, c<br></div>"
    }
}
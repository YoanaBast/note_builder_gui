{
    "GitHub": {
        "location": "contents\\GitHub.html",
        "content": "<div class=\"category-content\">>> Upload a folder to an empty GitHub repo:<br><br>    cd path/to/your/folder<br>    git init<br>    git remote add origin https://github.com/your-username/your-repo-name.git<br>    git add .<br>    git commit -m \"Initial commit\"<br>    git branch -M main<br>    git push -u origin main<br>    <br><br>>> Clone a repo into an empty folder:<br><br>    cd path/to/your/empty-folder<br>    git clone https://github.com/your-username/your-repo.git <br><br><br>>> Remove folder after added by mistake (ex.: .idea):<br><br>    git rm -r --cached .idea<br>    git commit -m \"Stop tracking .idea\"<br>    git push<br><br>>> Publish a page:<br><br>    The main HTML file should be in root named index.html<br><br>    1. Go to your repository on GitHub.<br>    2. Click Settings \u2192 Pages (or scroll to the \u201cGitHub Pages\u201d section).<br>    3. Under Source, select the branch: main (or master), and folder: /root.<br>    4. Click Save.<br>    5. GitHub will provide a URL, e.g., https://YOUR_USERNAME.github.io/python-cs-notes/<br>        \u2022 Wait a few minutes for GitHub Pages to process.</div>"
    },
    "Slice Notation": {
        "location": "contents\\Slice Notation.html",
        "content": "<div class=\"category-content\"># reverse<br>word = input()<br>print(word[::-1]) <br><br>----------------------<br><br>#slicing with a step - skips letters<br>print(text[::2])<br></div>"
    },
    ".replace()": {
        "location": "contents\\.replace().html",
        "content": "<div class=\"category-content\">>> Replace by index - use slicing:<br>&nbsp;&nbsp;&nbsp;&nbsp;#  Strings are immutable: assignment via index like name[0] = 'b' won\u2019t work, you need slicing:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;name = 'Yoana'<br>&nbsp;&nbsp;&nbsp;&nbsp;new_name = 'b' + name[1:] # oana<br>&nbsp;&nbsp;&nbsp;&nbsp;print(new_name)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: Boana<br><br>&nbsp;&nbsp;&nbsp;&nbsp;my_list = [10, 20, 30, 40]<br>&nbsp;&nbsp;&nbsp;&nbsp;my_list[1] = 99<br>&nbsp;&nbsp;&nbsp;&nbsp;print(my_list)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: [10, 99, 30, 40]<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;my_dict = {'a': 1, 'b': 2, 'c': 3}<br>&nbsp;&nbsp;&nbsp;&nbsp;my_dict['b'] = 99<br>&nbsp;&nbsp;&nbsp;&nbsp;print(my_dict)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: {'a': 1, 'b': 99, 'c': 3}<br><br>>> Replace by char - use .replace(old, new):<br>#  .replace() is a string method only. It cannot be called on lists, dicts, numbers, or other types.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"banana\"<br>&nbsp;&nbsp;&nbsp;&nbsp;new_text = text.replace('b', 'c')<br>&nbsp;&nbsp;&nbsp;&nbsp;print(new_text) <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: canana<br><br>#  By default str.replace(old, new) replaces all occurrences of old in the string. To replace only the first occurrence of a substring in Python, use the third argument of .replace():<br><br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"hello world, hello universe, hello everyone\"<br>&nbsp;&nbsp;&nbsp;&nbsp;new_text = text.replace(\"hello\", \"hi\", 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(new_text)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: hi world, hello universe, hello everyone<br><br></div>"
    },
    "ASCII": {
        "location": "contents\\ASCII.html",
        "content": "<div class=\"category-content\">ord('a')<br>#this will get the ASCII code<br><br>----------------------<br><br>chr(100)<br>this will get the ASCII symbol<br><br><br><a href=\"https://www.ascii-code.com/\" target=\"_blank\">ASCII Table</a><br></div>"
    },
    "Ranges": {
        "location": "contents\\Ranges.html",
        "content": "<div class=\"category-content\"># regular<br>range(start=0, stop=stop -1, step=1) <br>for a in range(5):  # (0, 5, 1)<br>    print(a)<br> 0<br> 1<br> 2<br> 3<br> 4<br><br>----------------------<br><br># reverse<br>range(start=n, stop=stop +1, step=-1) <br><br>for a in range(5, 0, -1):<br>    print(a)<br>5<br>4<br>3<br>2<br>1    <br><br>word = \"hello\"<br>for i in range((len(word) -1), -1, -1):<br>    print(word[i], end='')<br># Output: olleh<br><br>----------------------    <br><br>#shape illustration <br><br>n = int(input())<br>for i in range(1, n + 1):<br>    print('*' * i)<br>for k in range(n -1, 0, -1):<br>    print('*' * k)<br><br># Output: <br>*<br>**<br>***<br>****<br>*****<br>****<br>***<br>**<br>*<br></div>"
    },
    "for + else": {
        "location": "contents\\for + else.html",
        "content": "<div class=\"category-content\">for item in iterable:<br>    if condition:<br>        break  # If this runs, 'else' is skipped<br>else:<br>    print(\"No break occurred\")   # Runs only if the loop wasn't broken</div>"
    },
    "break vs continue": {
        "location": "contents\\break vs continue.html",
        "content": "<div class=\"category-content\"> for i in range(10):<br>    if i == 5:<br>        break  # stop loop when i == 5<br>    print(i)<br><br> # breaks the loop<br>______________<br><br>for line in file:<br>    if line.strip() == '':<br>        continue  # skip empty lines<br>    process(line)<br><br>#used to skip things, does not reset the loop</div>"
    },
    "Printing } in f-string": {
        "location": "contents\\Printing } in f-string.html",
        "content": "<div class=\"category-content\">\"{{\"  \u2192 prints \"{\"<br><br>\"}}\"  \u2192 prints \"}\"</div>"
    },
    "SyntaxError: f-string: expecting '}'": {
        "location": "contents\\SyntaxError: f-string: expecting '}'.html",
        "content": "<div class=\"category-content\">Use single quotes inside double-quoted f-strings:<br><br>    f\"Hello, {'John'}\"<br><br>Or use double quotes inside single-quoted f-strings:<br><br>    f'Hello, {\"John\"}'<br><br>Python gets confused when it sees the same quote type inside and outside \u2014 it can\u2019t tell where the string ends.<br>Use single quotes inside double-quoted f-strings:<br><br>Rule applies even in {}, ex:<br>f\"You've ordered pizza {self.name} prepared with {\", \".join(f'{i}: {q}' for i, q in self.ingredients.items())} and the price will be {self.price}lv.\"  <br>(this will raise the error still)   </div>"
    },
    "end= ": {
        "location": "contents\\end= .html",
        "content": "<div class=\"category-content\">&nbsp;&nbsp;&nbsp;&nbsp;name = \"Alice\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(f\"Hello, {name}\", end=' ')<br>&nbsp;&nbsp;&nbsp;&nbsp;print(\"How are you?\")<br><br>&nbsp;&nbsp;&nbsp;&nbsp;#  Output:Hello, Alice How are you?<br><br>&nbsp;&nbsp;&nbsp;&nbsp;# keep it out of the f str<br><br>#  end='\\n' is the default behavior of Python\u2019s print() function.</div>"
    },
    "sep=\n": {
        "location": "contents\\sep=\n.html",
        "content": "<div class=\"category-content\">&nbsp;&nbsp;&nbsp;&nbsp;print(1, 2, 3, sep='-')  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: 1-2-3<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;print('apple', 'banana', 'cherry', sep='\\n')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;apple<br>&nbsp;&nbsp;&nbsp;&nbsp;banana<br>&nbsp;&nbsp;&nbsp;&nbsp;cherry<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = ['apple', 'banana', 'cherry']<br>&nbsp;&nbsp;&nbsp;&nbsp;print(*fruits, sep=', ')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: apple, banana, cherry<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = {'apple': 5, 'banana': 3, 'cherry': 7}<br>&nbsp;&nbsp;&nbsp;&nbsp;items = [f\"{key}:{value}\" for key, value in fruits.items()]  # Create a list of \"key:value\" strings<br>&nbsp;&nbsp;&nbsp;&nbsp;print(*items, sep=', ', end=' ENDED HERE\\n')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: apple:5, banana:3, cherry:7 ENDED HERE<br><br>&nbsp;&nbsp;&nbsp;&nbsp;items = [f\"{k}:{v}\" for k, v in fruits.items()]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(*items, sep='\\n')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: <br>&nbsp;&nbsp;&nbsp;&nbsp;apple:5<br>&nbsp;&nbsp;&nbsp;&nbsp;banana:3<br>&nbsp;&nbsp;&nbsp;&nbsp;cherry:7</div>"
    },
    ".join()": {
        "location": "contents\\.join().html",
        "content": "<div class=\"category-content\">#  joins elements of an iterable (like a list of strings) into a single string.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;numbers = [1, 2, 4, 7, 14]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(\" + \".join(map(str, numbers)))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: 1 + 2 + 4 + 7 + 14<br># str.join() only works with strings, so we map to str<br><br>&nbsp;&nbsp;&nbsp;&nbsp;words = ['Python', 'is', 'awesome']<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;print('\\n'.join(words))<br>&nbsp;&nbsp;&nbsp;&nbsp;Python<br>&nbsp;&nbsp;&nbsp;&nbsp;is<br>&nbsp;&nbsp;&nbsp;&nbsp;Awesome<br><br>&nbsp;&nbsp;&nbsp;&nbsp;word = \"hello\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(', '.join(word))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: h, e, l, l, o<br><br>&nbsp;&nbsp;&nbsp;&nbsp;data = {'a': 1, 'b': 2, 'c': 3}<br>&nbsp;&nbsp;&nbsp;&nbsp;print(', '.join(data.keys()))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: a, b, c<br></div>"
    },
    "Concatenation ": {
        "location": "contents\\Concatenation .html",
        "content": "<div class=\"category-content\"># joining strings together to form one longer string<br><br>&nbsp;&nbsp;&nbsp;&nbsp;print('100% Complete!' + \"\\n\" + '[%%%%%%%%%%]')<br>&nbsp;&nbsp;&nbsp;&nbsp;100% Complete!<br>&nbsp;&nbsp;&nbsp;&nbsp;[%%%%%%%%%%]<br><br>&nbsp;&nbsp;&nbsp;&nbsp;print('ba' + 'na' + 'na')<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: banana<br><br>&nbsp;&nbsp;&nbsp;&nbsp;return (f\"Hotel {self.name} has {self.guests} total guests\"\r        <br>&nbsp;&nbsp;&nbsp;&nbsp;           f\"\\nFree rooms: {', '.join(map(str, free))}\"\r        <br>                           f\"\\nTaken rooms: {', '.join(map(str, taken))}\")<br><br>\u2022 Each line inside the parentheses is an f-string (formatted string literal).<br>\u2022 When you put string literals one after another inside parentheses, Python automatically concatenates them into one string.<br>\u2022 So this is the same as writing:<br>&nbsp;&nbsp;&nbsp;&nbsp;return (f\"Hotel {self.name} has {self.guests} total guests\" + f\"\\nFree rooms: {', '.join(map(str, free))}\" + f\"\\nTaken rooms: {', '.join(map(str, taken))}\")<br></div>"
    },
    "string formatting for numbers\n": {
        "location": "contents\\string formatting for numbers\n.html",
        "content": "<div class=\"category-content\"><br>#  the result is always a string, no matter what type self.hours is.</div>"
    },
    "\\n in f-string": {
        "location": "\\n in f-string.html",
        "content": "<div class=\"category-content\"><br># You can't use \\n (or any backslash) inside {} in an f-string. This is invalid: &nbsp;&nbsp;&nbsp;&nbsp;f\"{\\n'.join(...)}\"<br>&nbsp;&nbsp;&nbsp;&nbsp;return f\"Section {self.name}: {'\\n'.join(t.details() for t in self.tasks)}\"<br><br>Fix:<br>Move the expression outside:<br>&nbsp;&nbsp;&nbsp;&nbsp;joined = '\\n'.join(t.details() for t in self.tasks)<br>&nbsp;&nbsp;&nbsp;&nbsp;return f\"Section {self.name}: {joined}\"<br></div>"
    },
    "whitespaces, .strip()": {
        "location": "contents\\whitespaces, .strip().html",
        "content": "<div class=\"category-content\">#  If a string is empty or contains only white spaces, calling .strip() on it will return an empty string.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;value = \"   \"     # only spaces<br>&nbsp;&nbsp;&nbsp;&nbsp;value.strip()     # returns \"\"<br><br>#  So, to check whether a string is empty or only spaces:<br>&nbsp;&nbsp;&nbsp;&nbsp;if not value.strip():<br>\r    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise ValueError(\"Name cannot be empty or just whitespace!\")<br><br>#  In Python, the empty string \"\" is considered falsy, which means it behaves like False in a boolean context, hence 'if not' can be used.</div>"
    },
    "str(), repr(), !r, !s": {
        "location": "contents\\str(), repr(), !r, !s.html",
        "content": "<div class=\"category-content\">    &nbsp;&nbsp;&nbsp;&nbsp;return '{' + ', '.join(f\"{kvp[0]!r}: {kvp[1]!r}\" for kvp in self.array) + '}'<br># the !r in an f-string is a conversion flag that tells Python to use the repr() of the expression instead of str().<br><br>&nbsp;&nbsp;&nbsp;&nbsp;{'name': 'Peter', 'age': 25}<br>#Notice that !r includes the quotes around \"Peter\", because that\u2019s how repr() shows strings.<br><br><br>\u2022 !r \u2192 use repr()<br>f\"{x!r}\"&nbsp;&nbsp;&nbsp;&nbsp;Calls repr(x) inside f-string<br><br>\u2022 {} (default) \u2192 use str()<br>f\"{x!s}\"&nbsp;&nbsp;&nbsp;&nbsp;Calls str(x) inside f-string&nbsp;&nbsp;&nbsp;&nbsp;<br>f\"{x}\"&nbsp;&nbsp;&nbsp;&nbsp;Calls str(x) inside f-string&nbsp;&nbsp;&nbsp;&nbsp;<br><br><br>str() \u2192 Meant to return a \u201cnice\u201d or human-readable representation of an object. Used by print() by default.<br>&nbsp;&nbsp;&nbsp;&nbsp;s = \"Hello\\nWorld\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(str(s))   <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;Hello<br>&nbsp;&nbsp;&nbsp;&nbsp;World<br>#  Notice that the newline is interpreted; it prints on two lines.<br><br>repr() \u2192 Meant to return an \u201cofficial\u201d or unambiguous representation of an object. Shows all escape characters, quotes, etc.<br>&nbsp;&nbsp;&nbsp;&nbsp;s = \"Hello\\nWorld\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(repr(s))  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: 'Hello\\nWorld'<br>#  Notice the \\n is visible, and quotes are included.<br><br></div>"
    },
    "unpacking operator *": {
        "location": "contents\\unpacking operator *.html",
        "content": "<div class=\"category-content\">The * in print(*fruits, sep=', ') is the unpacking operator.<br><br>Without *:<br>    fruits = ['apple', 'banana', 'cherry']<br>    print(fruits)<br>    # Output: ['apple', 'banana', 'cherry']<br>#  It prints the list as a list, with brackets and quotes.<br><br>With *:<br>    print(fruits)<br>    # Output: apple banana cherry<br><br>#  The * unpacks the list, so print receives the items as if you had written:<br>    print('apple', 'banana', 'cherry')</div>"
    },
    "Sets ": {
        "location": "contents\\Sets .html",
        "content": "<div class=\"category-content\"><br>>> Methods<br><br>s = {1, 2, 3}<br><br>The add() method only takes a single element at a time. If you try to pass a list or another iterable, it will treat the whole thing as one element<br>&nbsp;&nbsp;&nbsp;&nbsp;s.add(4)        # {1,2,3,4}<br>&nbsp;&nbsp;&nbsp;&nbsp;s.add([5, 6])   # adds the *list itself* as one element<br>&nbsp;&nbsp;&nbsp;&nbsp;print(s)        # {1, 2, 3, 4, [5, 6]}  <-- note the list inside<br><br>The update() method lets you add multiple elements to a set at once, and you can pass it any iterable \u2014 like a list, tuple, or even another set. It adds all the elements that aren\u2019t already in the set.<br>&nbsp;&nbsp;&nbsp;&nbsp;s.update([3,5]) # {1,2,3,4,5}<br><br>If you use remove(x) on a set and x is not in the set, Python will raise a KeyError.<br>&nbsp;&nbsp;&nbsp;&nbsp;s.remove(2)     # {1,3,4,5}<br><br>If you want to avoid an error when the element might not exist, use discard(x) instead:<br>&nbsp;&nbsp;&nbsp;&nbsp;s.discard(10)   # {1,3,4,5}  (no error)<br><br>set.pop() does not remove the \u201clast\u201d element because sets in Python are unordered. It removes and returns an arbitrary element\u2014which element you get is unpredictable.<br>&nbsp;&nbsp;&nbsp;&nbsp;elem = s.pop()  # removes and returns an arbitrary element<br><br>clear() removes all elements from the set, leaving it empty. It doesn\u2019t return anything.<br>&nbsp;&nbsp;&nbsp;&nbsp;s.clear()       # s becomes set()</div>"
    },
    "Lists": {
        "location": "contents\\Lists.html",
        "content": "<div class=\"category-content\"># list[index] = calls the value at that position; the first position is 0 and the last is (len(list) - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;letters = ['a', 'b', 'c', 'd']<br><br>&nbsp;&nbsp;&nbsp;&nbsp;print(letters[0])  # 'a'  \u2192 first element<br>&nbsp;&nbsp;&nbsp;&nbsp;print(letters[2])  # 'c'  \u2192 third element<br>&nbsp;&nbsp;&nbsp;&nbsp;print(letters[-1]) # 'd'  \u2192 last element using negative index<br><br># list.index(letter) = calls the index<br>&nbsp;&nbsp;&nbsp;&nbsp;letters = ['a', 'b', 'c', 'd']<br><br>&nbsp;&nbsp;&nbsp;&nbsp;print(letters.index('b'))  # 1  \u2192 'b' is at index 1<br>&nbsp;&nbsp;&nbsp;&nbsp;print(letters.index('d'))  # 3  \u2192 'd' is at index 3<br><br><br>>> Slice Lists:<br>&nbsp;&nbsp;&nbsp;&nbsp;start = [10, 20, 30, 40, 50]<br>&nbsp;&nbsp;&nbsp;&nbsp;middle = 2<br><br>&nbsp;&nbsp;&nbsp;&nbsp;left = start[0:middle + 1]    # Elements from index 0 up to middle (inclusive)<br>&nbsp;&nbsp;&nbsp;&nbsp;right = start[middle + 1:]    # Elements from index middle+1 to the end<br><br>&nbsp;&nbsp;&nbsp;&nbsp;print(left)   # [10, 20, 30]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(right)  # [40, 50]<br><br>&nbsp;&nbsp;&nbsp;&nbsp;# does not work for deque, needs to be converted to list<br><br><br>>> List Comprehension:<br><br>[expression for item in iterable if condition]<br><br>&nbsp;&nbsp;&nbsp;&nbsp;squares = [x**2 for x in range(5)]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(squares)  # Output: [0, 1, 4, 9, 16]<br><br><br>>> Replace:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = ['apple', 'banana', 'cherry']<br>&nbsp;&nbsp;&nbsp;&nbsp;fruits[1] = 'blueberry'<br>&nbsp;&nbsp;&nbsp;&nbsp;print(fruits)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: ['apple', 'blueberry', 'cherry']<br>#  in Python, replacing an element in a list must be done using its index. Lists are ordered and mutable, so you can assign a new value to a specific position.<br><br><br>>> Reference object:<br><br>### shallow copy<br>&nbsp;&nbsp;&nbsp;&nbsp;list_a = [1, 2, 3]<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b = list_a[:]<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b[0] = 5<br>&nbsp;&nbsp;&nbsp;&nbsp;print(list_a) # Output:  [1, 2, 3]<br>`list_b = list_a[:]` creates a shallow copy of `list_a`. `list_b` is now a new object, so modifying it does not affect the original `list_a`.<br><br><br>### reference<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b = list_a<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b[0] = 5<br>&nbsp;&nbsp;&nbsp;&nbsp;print(list_a)  # Output: [5, 2, 3]<br>list_b would be just another reference to the same list object. Modifying list_b would also change list_a<br><br><br>### shallow copy - nested<br>&nbsp;&nbsp;&nbsp;&nbsp;list_a = [[1, 2], [3, 4]]<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b = list_a[:]   # shallow copy<br>&nbsp;&nbsp;&nbsp;&nbsp;list_b[0][0] = 9<br>&nbsp;&nbsp;&nbsp;&nbsp;print(list_a)  # Output: [[9, 2], [3, 4]]<br>Shallow copies only copy the top-level list. If the list contains nested lists or mutable objects, those inner objects are shared. So, changes to nested objects will affect the original, even with a shallow copy.<br></div>"
    },
    "input transformations": {
        "location": "contents\\input transformations.html",
        "content": "<div class=\"category-content\">str -> list[str]:<br>&nbsp;&nbsp;&nbsp;&nbsp;name = 'Yoana'<br>&nbsp;&nbsp;&nbsp;&nbsp;name_list = list(name)<br>&nbsp;&nbsp;&nbsp;&nbsp;['Y', 'o', 'a', 'n', 'a']<br><br>str -> list[int]:<br>&nbsp;&nbsp;&nbsp;&nbsp;nums = '1, 2, 3, 4, 5'<br>&nbsp;&nbsp;&nbsp;&nbsp;nums_list = [int(item) for item in nums.split(', ')]<br>&nbsp;&nbsp;&nbsp;&nbsp;[1, 2, 3, 4, 5]  # list of integers<br><br>&nbsp;&nbsp;&nbsp;&nbsp;num = 46473829<br>&nbsp;&nbsp;&nbsp;&nbsp;print((list(map(int, str(num)))))<br>&nbsp;&nbsp;&nbsp;&nbsp;[4, 6, 4, 7, 3, 8, 2, 9] # list of integers<br><br>lowercase<br>&nbsp;&nbsp;&nbsp;&nbsp;x = (input().lower().split(' '))<br>&nbsp;&nbsp;&nbsp;&nbsp;SCREAMING IN CAPS LOCK<br>&nbsp;&nbsp;&nbsp;&nbsp;['screaming', 'in', 'caps', 'lock']</div>"
    },
    ".split()": {
        "location": "contents\\.split().html",
        "content": "<div class=\"category-content\">.split() is a string method.<br><br>It splits a string into a list of substrings based on a separator.<br><br>By default, the separator is any whitespace (spaces, tabs, newlines).<br><br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"Hello world Python\"<br>&nbsp;&nbsp;&nbsp;&nbsp;words = text.split()<br>&nbsp;&nbsp;&nbsp;&nbsp;print(words)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: ['Hello', 'world', 'Python']<br><br><br>Using a custom separator<br>You can pass a string as the separator:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"apple,banana,cherry\"<br>&nbsp;&nbsp;&nbsp;&nbsp;fruits = text.split(\",\")<br>&nbsp;&nbsp;&nbsp;&nbsp;print(fruits)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: ['apple', 'banana', 'cherry']<br><br><br>Limiting the number of splits<br>You can also limit how many splits are made using the maxsplit argument:<br>&nbsp;&nbsp;&nbsp;&nbsp;text = \"one two three four\"<br>&nbsp;&nbsp;&nbsp;&nbsp;print(text.split(maxsplit=2))<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: ['one', 'two', 'three four']</div>"
    },
    ".remove(), .pop(), .popitem()": {
        "location": "contents\\.remove(), .pop(), .popitem().html",
        "content": "<div class=\"category-content\"><br>To remove all occurrences:<br>&nbsp;&nbsp;&nbsp;&nbsp;lst = [1, 2, 3, 2, 4, 2]<br>&nbsp;&nbsp;&nbsp;&nbsp;while 2 in lst:<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lst.remove(2)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(lst)  # [1, 3, 4]<br><br>&nbsp;&nbsp;&nbsp;&nbsp;lst = [1, 2, 3, 2, 4, 2]<br>&nbsp;&nbsp;&nbsp;&nbsp;lst = [x for x in lst if x != 2]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(lst)  # [1, 3, 4]<br></div>"
    },
    "List vs Array\n": {
        "location": "contents\\List vs Array\n.html",
        "content": ""
    },
    "Dicts": {
        "location": "contents\\Dicts.html",
        "content": "<div class=\"category-content\"><br>>>> Multiple values per 1 key:<br>&nbsp;&nbsp;&nbsp;&nbsp;dict = {}<br>&nbsp;&nbsp;&nbsp;&nbsp;index = int(input())<br>&nbsp;&nbsp;&nbsp;&nbsp;for i in range(index):<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key = input()<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val = input()<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if key not in dict:<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dict[key] = []<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dict[key].append(val)</div>"
    },
    "sorted()": {
        "location": "contents\\sorted().html",
        "content": "<div class=\"category-content\">>>> Sorting Dict By Values<br>&nbsp;&nbsp;&nbsp;&nbsp;my_dict = {'apple': 3, 'banana': 1, 'orange': 2}<br>&nbsp;&nbsp;&nbsp;&nbsp;sorted_dict = dict(sorted(my_dict.items(), key=lambda item: item[1]))<br>&nbsp;&nbsp;&nbsp;&nbsp;print(sorted_dict)<br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: {'banana': 1, 'orange': 2, 'apple': 3}<br>#  You're telling Python: \"Sort using the value part of each (key, value) pair (index 1 of the item tuple)\"<br><br><br></div>"
    },
    ".get(), .setdefault()": {
        "location": "contents\\.get(), .setdefault().html",
        "content": "<div class=\"category-content\">>>> Update the quantity of a specific ingredient in the dictionary.<br>&nbsp;&nbsp;&nbsp;&nbsp;self.ingredients = {\"flour\": 2}<br>&nbsp;&nbsp;&nbsp;&nbsp;ingredient = \"flour\"<br>&nbsp;&nbsp;&nbsp;&nbsp;quantity = 3<br><br>&nbsp;&nbsp;&nbsp;&nbsp;self.ingredients[ingredient] = self.ingredients.get(ingredient, 0) + quantity<br><br>1. self.ingredients.get(ingredient, 0):<br>&nbsp;&nbsp;&nbsp;&nbsp;- Checks if the ingredient exists in the dictionary.<br>&nbsp;&nbsp;&nbsp;&nbsp;- If it does, returns its current amount.<br>&nbsp;&nbsp;&nbsp;&nbsp;- If not, returns 0.<br> 2. + quantity:<br>&nbsp;&nbsp;&nbsp;&nbsp;- Adds the new quantity to the existing amount (or 0 if it's new).<br>3. self.ingredients[ingredient] = ...:<br>&nbsp;&nbsp;&nbsp;&nbsp;- Stores the new total back in the dictionary. If they key did not exist, it created key: 0<br><br># {\"flour\": 5} if \"flour\" was 2 and we added 3<br># {\"sugar\": 3} if \"sugar\" was not in the dictionary before<br></div>"
    },
    "next()": {
        "location": "contents\\next().html",
        "content": "<div class=\"category-content\">&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;numbers = [1, 2, 3, 4]<br><br># Find the first even number<br>&nbsp;&nbsp;&nbsp;&nbsp;first_even = next((n for n in numbers if n % 2 == 0), None)<br>&nbsp;&nbsp;&nbsp;&nbsp;print(first_even)  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: 2</div>"
    },
    "all()\n": {
        "location": "contents\\all()\n.html",
        "content": "<div class=\"category-content\">&nbsp;&nbsp;&nbsp;&nbsp;conditions = [True, True, True]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(all(conditions))  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: True<br><br>&nbsp;&nbsp;&nbsp;&nbsp;conditions = [True, False, True]<br>&nbsp;&nbsp;&nbsp;&nbsp;print(all(conditions))  <br>&nbsp;&nbsp;&nbsp;&nbsp;# Output: False</div>"
    },
    "any()\n": {
        "location": "contents\\any()\n.html",
        "content": ""
    },
    "reduce()": {
        "location": "contents\\reduce().html",
        "content": "<img src=\"cat_images/reduce.png\" alt=\"reduce()\" width=\"500\" style=\"display:block; margin-right:auto;\">"
    },
    "isinstance()": {
        "location": "contents\\isinstance().html",
        "content": "<div class=\"category-content\">isinstance(object, classinfo)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;item = 3.14<br>&nbsp;&nbsp;&nbsp;&nbsp;if isinstance(item, float):<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(\"Item is a float.\")<br>&nbsp;&nbsp;&nbsp;&nbsp;else:<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(\"Item is NOT a float.\")<br><br>>>> with class:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;class Animal:<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br><br>&nbsp;&nbsp;&nbsp;&nbsp;class Dog(Animal):<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br><br>&nbsp;&nbsp;&nbsp;&nbsp;d = Dog()<br>&nbsp;&nbsp;&nbsp;&nbsp;print(isinstance(d, Dog))     # True<br>&nbsp;&nbsp;&nbsp;&nbsp;print(isinstance(d, Animal))  # True, because Dog is a subclass of Animal<br><br># Using a tuple in isinstance lets you check if the object is an instance of any of several classes. <br><br>&nbsp;&nbsp;&nbsp;&nbsp;if not isinstance(food, (Vegetable, Fruit)):\r    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise TypeError(f\"{self.__class__.__name__} does not eat {food.__class__.__name__}!\")<br>This means:<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 If food is not a Vegetable or a Fruit, raise the error.<br>&nbsp;&nbsp;&nbsp;&nbsp;\u2022 If it is either Vegetable or Fruit (or subclasses), it passes.<br></div>"
    },
    "__getitem__, __setitem__": {
        "location": "contents\\__getitem__, __setitem__.html",
        "content": "<div class=\"category-content\">When you write:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;table[\"name\"] = \"Peter\"<br>Python internally calls the special method:<br>&nbsp;&nbsp;&nbsp;&nbsp;table.__setitem__(\"name\", \"Peter\")<br><br>For example, to get the value back, you can write:<br>&nbsp;&nbsp;&nbsp;&nbsp;print(table[\"name\"])<br>which calls:<br>&nbsp;&nbsp;&nbsp;&nbsp;table.__getitem__(\"name\")<br>and returns \"Peter\".</div>"
    },
    "Tuples": {
        "location": "contents\\Tuples.html",
        "content": ""
    },
    "comparison dunder methods": {
        "location": "contents\\comparison dunder methods.html",
        "content": "<div class=\"category-content\">==&nbsp;&nbsp;&nbsp;&nbsp;__eq__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Equality<br>!=&nbsp;&nbsp;&nbsp;&nbsp;__ne__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Not equal<br><&nbsp;&nbsp;&nbsp;&nbsp;__lt__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Less than<br><=&nbsp;&nbsp;&nbsp;&nbsp;__le__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Less than or equal<br>>&nbsp;&nbsp;&nbsp;&nbsp;__gt__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Greater than<br>>=&nbsp;&nbsp;&nbsp;&nbsp;__ge__(self, other)&nbsp;&nbsp;&nbsp;&nbsp;Greater than or equal<br><br>class Box:<br>    def __init__(self, volume):<br>        self.volume = volume<br><br>    def __lt__(self, other):<br>        return self.volume < other.volume<br><br>    def __eq__(self, other):<br>        return self.volume == other.volume<br><br>b1 = Box(10)<br>b2 = Box(20)<br><br>print(b1 < b2)  # True<br>print(b1 == b2) # False</div>"
    }
}